## get_max_score still could be used in this node
rm(list=ls())

## args ==== ====
library(Biostrings)
args = commandArgs(trailingOnly=TRUE)
if (length(args)==0) {
  print('parameters needed for converting to xlsx')
} else{
  workDir <- args[1]
  mhc_input <- args[2]
}

## test ==== ====
test <- FALSE
test <- TRUE
if (test){
  workDir <- '/omics/groups/OE0422/internal/yanhong/all_in_one_pipeline_collection/mhc4.1/MO79'
  mhc_input <- 'MHCI_epitopes_RNAseq_netMHCpan4_1.tab_renameCol_loh'
}

aln_matrix   <- "BLOSUM62"
data(list=c(aln_matrix),envir=.GlobalEnv)

## functions ==== ====

file.test <- '/home/lyuya/tmpodcf/parallel.log_test'
file.remove(file.test)
get_max_score_test <- function(x, ref.mat){
  write(paste0(x, collapse = ''), file = file.test, append = TRUE)
  write('----', file = file.test, append = TRUE)
  write(paste0(ref.mat[1,], collapse = ''), file = file.test, append = TRUE)
  write('---- ----', file = file.test, append = TRUE)
}

parallel_run <- function(qur.mat, ref.mat){
  if (nrow(qur.mat)==1){
    df.maxScore <- get_max_score(qur.mat, ref.mat)
  }else{
    t1 <- proc.time()
    parallel.log <- '/home/lyuya/tmpodcf/parallel.log'
    file.remove(parallel.log)

    ##
    num.cores <- nrow(qur.mat)
    num.cores <- 1
    cl <- parallel::makeCluster(num.cores, outfile = parallel.log)
    doParallel::registerDoParallel(cl)

    ##
    # if (is.null(env)) {
      # env <- environment()
    # }
    # parallel::clusterExport(cl, list(ls(env)), envir=env)
    parallel::clusterExport(cl, varlist=ls(.GlobalEnv), envir=.GlobalEnv)

    ##
    df.maxScore <- parallel::parApply(cl, qur.mat, 1,
                               function(x) get_max_score_single(x, ref.mat)
                               )


    ##
    print(paste0("Alignment Time : ", (proc.time() - t1)[3]))
    parallel::stopCluster(cl)
  }

  # df.maxScore <- get_max_score_single(qur.mat[1,], ref.mat)
  return(df.maxScore)
}


main_run <- function(){
  input.dir  <- file.path(workDir, '/8_chose_neoepitode/blast_score')
  output.dir <- file.path(workDir, '/8_chose_neoepitode')
  dir.create(output.dir, showWarnings = FALSE)
  setwd(output.dir)

  ## input reference ====
  # rFile <- '/omics/groups/OE0422/internal/yanhong/git/hex/unipro/hpv_reviewed_sequences_all_subtypes.csv_fasta'
  # rFile <- '/omics/groups/OE0422/internal/yanhong/git/hex/virus_bac_database/sequences_human_virus_freseq_all.fasta'
  rFile <- '/omics/groups/OE0422/internal/yanhong/git/hex/virus_bac_database/sequences_human_virus_freseq_all.fasta_3'

  ## input query ====
  qFile <- file.path(input.dir, mhc_input)
  qFile <- paste0(qFile, '_query.fa')
  
  ## get max score table ====
  # align to every length, without window drifting
  df.maxScore.allLength <- data.frame(matrix(ncol = 3, nrow = 0))
  colnames(df.maxScore.allLength) <- c('qur.pep.seq', 'ref.pep.seq', 'score')
  query.length <-sort(unique(nchar(readLines(qFile)[c(FALSE,TRUE)])))
  
  # for (i in query.length){
  for (i in 9:10){
    qur.mat <- get_matrix(qFile, window.width = i, mask = TRUE)
    ref.mat <- get_matrix(rFile, window.width = i)
    
    # df.maxScore <- get_max_score(qur.mat, ref.mat)
    df.maxScore <- parallel_run(qur.mat, ref.mat)

    ## remove duplicates
    df.maxScore.lite <- df.maxScore[,-2]
    df.maxScore.lite2 <- df.maxScore.lite[!duplicated(df.maxScore.lite), ]
    df.maxScore.allLength <- rbind(df.maxScore.allLength, df.maxScore.lite2)
  }
  
  colnames(df.maxScore.allLength) <- c('Mutant_peptide','alignBL62_ref_seq','alignBL62_score')
  ## merge to MHC table ====
  file.mhc <- paste0(output.dir,'/',mhc_input,'_blastpScore' )
  df.mhc <- read.table(file.mhc, header = TRUE, stringsAsFactors = FALSE, sep = '\t')
  col.index <- which(colnames(df.mhc)=='Mutant_peptide')
  
  df.final <- merge(df.mhc, df.maxScore.allLength, by = 'Mutant_peptide', all.x=TRUE)
  df.final2 <- df.final[,c(2:(col.index),(ncol(df.final)-1):ncol(df.final),1,(col.index+1):(ncol(df.final)-2))]

  ## write to file ====
  file.output <- paste0(output.dir,'/',mhc_input, '_alignBL62score')
  write.table(df.final2, file=file.output, row.names=FALSE, col.names=TRUE, quote=FALSE, sep='\t')
}

##
get_max_score <- function(qur.mat, ref.mat){
  df1 <- data.frame(matrix(ncol = 4, nrow = 0))
  colnames(df1) <- c('qur.pep.seq', 'ref.pep.name', 'ref.pep.seq', 'score')

  for (i in 1:nrow(qur.mat)){
    qur.pep <- qur.mat[i,]
    scores <- align_to_ref_epitopes(qur.pep, ref.mat)

    qur.pep.seq <- paste(qur.pep, collapse='')
    max_score <- max(scores)

    max_index <- which(scores == max_score)
    for (j in max_index){
      ref.pep.name <- names(scores)[j]
      ref.pep.seq  <- paste(ref.mat[j,], collapse='')
      df1[nrow(df1) + 1,] = list(qur.pep.seq, ref.pep.name, ref.pep.seq, max_score)
    }
  }
  return(df1)
}

get_max_score_single <- function(qur.pep, ref.mat){
  df1 <- data.frame(matrix(ncol = 4, nrow = 0))
  colnames(df1) <- c('qur.pep.seq', 'ref.pep.name', 'ref.pep.seq', 'score')
  
  scores <- align_to_ref_epitopes(qur.pep, ref.mat)
  qur.pep.seq <- paste(qur.pep, collapse='')
  max_score <- max(scores)
  
  max_index <- which(scores == max_score)
  for (j in max_index){
    ref.pep.name <- names(scores)[j]
    ref.pep.seq  <- paste(ref.mat[j,], collapse='')
    df1[nrow(df1) + 1,] = list(qur.pep.seq, ref.pep.name, ref.pep.seq, max_score)
  }
  return(df1)
}


##
get_matrix <- function (file.input, window.width, mask = FALSE){
  aaSet <- readAAStringSet(file.input, format = "fasta")
  if(mask){
    aaSet <- aaSet[nchar(aaSet)==window.width]
  }
  
  df1 <- data.frame(matrix(ncol = 2, nrow = 0))
  colnames(df1) <- c('pep.name', 'pep.seq')
  for (i in 1:length(aaSet)){
    sequence <-  as.character(aaSet[[i]])
    query.name <- names(aaSet)[i]

  # for (j in 1:5){
    for (j in 1: (nchar(sequence)-window.width+1)){
      seq.sub <- substr(sequence, j, (j+window.width-1))
      pep.name <- paste(query.name, seq.sub, sep='_')
      df1[nrow(df1) + 1,] = list(pep.name, seq.sub)
    }
  }
  vec <- stats::setNames(df1$pep.seq, df1$pep.name)
  # if (mask){
  #   vec <- mask_short_sequence(vec, window.width)
  # }

  aaSet.sub <- Biostrings::AAStringSet(vec)
  mat <- Biostrings::as.matrix(aaSet.sub, use.names = T)
  return(mat)
}

mask_short_sequence <- function(vec, window.width){
  c1 <- c()
  for (i in 1:length(vec)){
    if (nchar(vec[i])!=window.width){
      c1 <- c(c1,i)
    }
  }
  vec2 <- vec[-c1]
  return(vec2)
}


## 
align_to_ref_epitopes <- function(x, ref, mag = 4 ) {
  print('aln_matrix')
  print(aln_matrix)
  print('debug, to check if bl62 is loaded or not here')
  # data(list=c(aln_matrix),envir=.GlobalEnv)
  print(ls(.GlobalEnv))
  print('debug, to check if bl62 is loaded or not here... ')
  print(ls())
  aln_matrix_solid <- get(aln_matrix, envir=.GlobalEnv) 
  xPosWt <- get_pos_weights(x, mag)
  xLen <- length(x)
  
  xAlnScoreVec <- c()
  if (is.matrix(ref)) {
    refSeqCount <- nrow(ref)
    } else if (is.character(ref)) {
      refSeqCount <- 1
    }
    else{
      stop("Unsupported object as ref. Must be either matrix or character")
    }

    for (i in 1:refSeqCount){
      xAlnScore <- 0
      refSeq <- ref[i, ]
      refName <- rownames(ref)[i]

      xAlnMat <- diag(aln_matrix_solid[x, refSeq])
      xAlnAmp <- xPosWt * xAlnMat
      xAlnScore <- sum(xAlnAmp)

      xAlnScoreVec[i] <- xAlnScore
      names(xAlnScoreVec)[i] <- refName
    }
    return(xAlnScoreVec)
  }

##

get_pos_weights <- function(x, mag = 4) {
  posScore <- c()
  xLen <- length(x)
  xMid <- xLen / 2
  if (xLen %% 2) {
    xMidCeil <- ceiling(xMid)
    xMidScore <- xMidCeil * mag
    posScore <- seq(1, xMidScore, mag)
    posScore <- c(posScore, rev(posScore[1:length(posScore) - 1]))
    xTopFloor <- floor(xLen / 3)
    posScore[1:xTopFloor] <- 1:xTopFloor
    xTail <- xLen - xTopFloor + 1
    posScore[xTail:xLen] <- xTopFloor:1
    
    } else{
    xMidScore <- xMid * mag
    posScore <- seq(1, xMidScore, mag)
    posScore <- c(posScore, rev(posScore))
    xTopFloor <- floor(xLen / 3)
    posScore[1:xTopFloor] <- 1:xTopFloor
    xTail <- xLen - xTopFloor + 1
    posScore[xTail:xLen] <- xTopFloor:1
  }
  return(posScore)
}

## exute main ==== ====
main_run()